
Wrk with Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a0  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001470  08001470  00011470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014b4  080014b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080014b4  080014b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014b4  080014b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014b8  080014b8  000114b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080014bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000000c  080014c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  080014c8  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005adb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000129b  00000000  00000000  00025b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  00026db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000528  00000000  00000000  00027370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb62  00000000  00000000  00027898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000638c  00000000  00000000  000373fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060004  00000000  00000000  0003d786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009d78a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000162c  00000000  00000000  0009d7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001458 	.word	0x08001458

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08001458 	.word	0x08001458

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9c7 	bl	80005b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f84a 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ba 	bl	80003a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f882 	bl	8000338 <MX_SPI1_Init>
	//A =   strcmp(Massiv,Massiv2);


	  //strcpy(Massiv2, Massiv+(strlen(Massiv)-5));

  strcpy(U, "AT+CGDCONT = 1,2,3\n");
 8000234:	4a16      	ldr	r2, [pc, #88]	; (8000290 <main+0x70>)
 8000236:	4b17      	ldr	r3, [pc, #92]	; (8000294 <main+0x74>)
 8000238:	4615      	mov	r5, r2
 800023a:	461c      	mov	r4, r3
 800023c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800023e:	6028      	str	r0, [r5, #0]
 8000240:	6069      	str	r1, [r5, #4]
 8000242:	60aa      	str	r2, [r5, #8]
 8000244:	60eb      	str	r3, [r5, #12]
 8000246:	6820      	ldr	r0, [r4, #0]
 8000248:	6128      	str	r0, [r5, #16]

  strcpy(K, U+(strlen(U)-6));
 800024a:	4811      	ldr	r0, [pc, #68]	; (8000290 <main+0x70>)
 800024c:	f7ff ffe0 	bl	8000210 <strlen>
 8000250:	4603      	mov	r3, r0
 8000252:	3b06      	subs	r3, #6
 8000254:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <main+0x70>)
 8000256:	4413      	add	r3, r2
 8000258:	4619      	mov	r1, r3
 800025a:	480f      	ldr	r0, [pc, #60]	; (8000298 <main+0x78>)
 800025c:	f001 f8f4 	bl	8001448 <strcpy>

  memcpy(R, U, 3);
 8000260:	2203      	movs	r2, #3
 8000262:	490b      	ldr	r1, [pc, #44]	; (8000290 <main+0x70>)
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <main+0x7c>)
 8000266:	f001 f8d9 	bl	800141c <memcpy>

  memcpy(N, U+3,7);
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <main+0x80>)
 800026c:	2207      	movs	r2, #7
 800026e:	4619      	mov	r1, r3
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <main+0x84>)
 8000272:	f001 f8d3 	bl	800141c <memcpy>

  memcpy(Q, U+13,1);
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <main+0x88>)
 8000278:	781a      	ldrb	r2, [r3, #0]
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <main+0x8c>)
 800027c:	701a      	strb	r2, [r3, #0]

  memcpy(W, U+15,1);
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <main+0x90>)
 8000280:	781a      	ldrb	r2, [r3, #0]
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <main+0x94>)
 8000284:	701a      	strb	r2, [r3, #0]

  memcpy(E, U+17,1);
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <main+0x98>)
 8000288:	781a      	ldrb	r2, [r3, #0]
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <main+0x9c>)
 800028c:	701a      	strb	r2, [r3, #0]
  strcpy(U, "AT+CGDCONT = 1,2,3\n");
 800028e:	e7d1      	b.n	8000234 <main+0x14>
 8000290:	200001bc 	.word	0x200001bc
 8000294:	08001470 	.word	0x08001470
 8000298:	20000040 	.word	0x20000040
 800029c:	20000144 	.word	0x20000144
 80002a0:	200001bf 	.word	0x200001bf
 80002a4:	20000028 	.word	0x20000028
 80002a8:	200001c9 	.word	0x200001c9
 80002ac:	2000004c 	.word	0x2000004c
 80002b0:	200001cb 	.word	0x200001cb
 80002b4:	200000c8 	.word	0x200000c8
 80002b8:	200001cd 	.word	0x200001cd
 80002bc:	200001a8 	.word	0x200001a8

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b090      	sub	sp, #64	; 0x40
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2228      	movs	r2, #40	; 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 f8b2 	bl	8001438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	2301      	movs	r3, #1
 80002e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	2310      	movs	r3, #16
 80002ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ee:	2300      	movs	r3, #0
 80002f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fc36 	bl	8000b68 <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000302:	f000 f88f 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f000 fea2 	bl	8001068 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032a:	f000 f87b 	bl	8000424 <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3740      	adds	r7, #64	; 0x40
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <MX_SPI1_Init+0x64>)
 800033e:	4a18      	ldr	r2, [pc, #96]	; (80003a0 <MX_SPI1_Init+0x68>)
 8000340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000342:	4b16      	ldr	r3, [pc, #88]	; (800039c <MX_SPI1_Init+0x64>)
 8000344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_SPI1_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_SPI1_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_SPI1_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_SPI1_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_SPI1_Init+0x64>)
 8000364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000368:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_SPI1_Init+0x64>)
 800036c:	2218      	movs	r2, #24
 800036e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <MX_SPI1_Init+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_SPI1_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <MX_SPI1_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_SPI1_Init+0x64>)
 8000384:	220a      	movs	r2, #10
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_SPI1_Init+0x64>)
 800038a:	f000 ffa7 	bl	80012dc <HAL_SPI_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000394:	f000 f846 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000150 	.word	0x20000150
 80003a0:	40013000 	.word	0x40013000

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <MX_GPIO_Init+0x78>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a17      	ldr	r2, [pc, #92]	; (800041c <MX_GPIO_Init+0x78>)
 80003be:	f043 0310 	orr.w	r3, r3, #16
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <MX_GPIO_Init+0x78>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0310 	and.w	r3, r3, #16
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_GPIO_Init+0x78>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a11      	ldr	r2, [pc, #68]	; (800041c <MX_GPIO_Init+0x78>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_GPIO_Init+0x78>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0304 	and.w	r3, r3, #4
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIN_Pin|CS_Pin|CLK_Pin, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80003ee:	480c      	ldr	r0, [pc, #48]	; (8000420 <MX_GPIO_Init+0x7c>)
 80003f0:	f000 fba2 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_Pin CS_Pin CLK_Pin */
  GPIO_InitStruct.Pin = DIN_Pin|CS_Pin|CLK_Pin;
 80003f4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80003f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003fe:	2301      	movs	r3, #1
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000402:	2303      	movs	r3, #3
 8000404:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	4619      	mov	r1, r3
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_GPIO_Init+0x7c>)
 800040e:	f000 fa0f 	bl	8000830 <HAL_GPIO_Init>

}
 8000412:	bf00      	nop
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000
 8000420:	40011000 	.word	0x40011000

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>
	...

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <HAL_MspInit+0x5c>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a14      	ldr	r2, [pc, #80]	; (800048c <HAL_MspInit+0x5c>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b12      	ldr	r3, [pc, #72]	; (800048c <HAL_MspInit+0x5c>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <HAL_MspInit+0x5c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <HAL_MspInit+0x5c>)
 8000454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000458:	61d3      	str	r3, [r2, #28]
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_MspInit+0x5c>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <HAL_MspInit+0x60>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <HAL_MspInit+0x60>)
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	bf00      	nop
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000
 8000490:	40010000 	.word	0x40010000

08000494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <HAL_SPI_MspInit+0x70>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d123      	bne.n	80004fc <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a13      	ldr	r2, [pc, #76]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004e4:	23a0      	movs	r3, #160	; 0xa0
 80004e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e8:	2302      	movs	r3, #2
 80004ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ec:	2303      	movs	r3, #3
 80004ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <HAL_SPI_MspInit+0x78>)
 80004f8:	f000 f99a 	bl	8000830 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004fc:	bf00      	nop
 80004fe:	3720      	adds	r7, #32
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40013000 	.word	0x40013000
 8000508:	40021000 	.word	0x40021000
 800050c:	40010800 	.word	0x40010800

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <NMI_Handler+0x4>

08000516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <HardFault_Handler+0x4>

0800051c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <MemManage_Handler+0x4>

08000522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <BusFault_Handler+0x4>

08000528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <UsageFault_Handler+0x4>

0800052e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000556:	f000 f86b 	bl	8000630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}

0800055e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
	...

0800056c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	; (80005a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	; (80005b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000592:	f7ff ffe4 	bl	800055e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000596:	f000 ff1d 	bl	80013d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059a:	f7ff fe41 	bl	8000220 <main>
  bx lr
 800059e:	4770      	bx	lr
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005a8:	080014bc 	.word	0x080014bc
  ldr r2, =_sbss
 80005ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005b0:	200001e0 	.word	0x200001e0

080005b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_IRQHandler>

080005b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ba:	2003      	movs	r0, #3
 80005bc:	f000 f904 	bl	80007c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c0:	200f      	movs	r0, #15
 80005c2:	f000 f805 	bl	80005d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c6:	f7ff ff33 	bl	8000430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x54>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x58>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4619      	mov	r1, r3
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f911 	bl	8000816 <HAL_SYSTICK_Config>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e00e      	b.n	800061c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b0f      	cmp	r3, #15
 8000602:	d80a      	bhi.n	800061a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000604:	2200      	movs	r2, #0
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f000 f8e7 	bl	80007de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <HAL_InitTick+0x5c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	e000      	b.n	800061c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_IncTick+0x1c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_IncTick+0x20>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4413      	add	r3, r2
 8000640:	4a03      	ldr	r2, [pc, #12]	; (8000650 <HAL_IncTick+0x20>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	20000008 	.word	0x20000008
 8000650:	200001dc 	.word	0x200001dc

08000654 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b02      	ldr	r3, [pc, #8]	; (8000664 <HAL_GetTick+0x10>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	200001dc 	.word	0x200001dc

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000794:	d301      	bcc.n	800079a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2301      	movs	r3, #1
 8000798:	e00f      	b.n	80007ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <SysTick_Config+0x40>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a2:	210f      	movs	r1, #15
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f7ff ff90 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SysTick_Config+0x40>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <SysTick_Config+0x40>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff49 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f0:	f7ff ff5e 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 80007f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	68b9      	ldr	r1, [r7, #8]
 80007fa:	6978      	ldr	r0, [r7, #20]
 80007fc:	f7ff ff90 	bl	8000720 <NVIC_EncodePriority>
 8000800:	4602      	mov	r2, r0
 8000802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff5f 	bl	80006cc <__NVIC_SetPriority>
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffb0 	bl	8000784 <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	b480      	push	{r7}
 8000832:	b08b      	sub	sp, #44	; 0x2c
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000842:	e169      	b.n	8000b18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000844:	2201      	movs	r2, #1
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	4013      	ands	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	429a      	cmp	r2, r3
 800085e:	f040 8158 	bne.w	8000b12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	4a9a      	ldr	r2, [pc, #616]	; (8000ad0 <HAL_GPIO_Init+0x2a0>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d05e      	beq.n	800092a <HAL_GPIO_Init+0xfa>
 800086c:	4a98      	ldr	r2, [pc, #608]	; (8000ad0 <HAL_GPIO_Init+0x2a0>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d875      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 8000872:	4a98      	ldr	r2, [pc, #608]	; (8000ad4 <HAL_GPIO_Init+0x2a4>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d058      	beq.n	800092a <HAL_GPIO_Init+0xfa>
 8000878:	4a96      	ldr	r2, [pc, #600]	; (8000ad4 <HAL_GPIO_Init+0x2a4>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d86f      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 800087e:	4a96      	ldr	r2, [pc, #600]	; (8000ad8 <HAL_GPIO_Init+0x2a8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d052      	beq.n	800092a <HAL_GPIO_Init+0xfa>
 8000884:	4a94      	ldr	r2, [pc, #592]	; (8000ad8 <HAL_GPIO_Init+0x2a8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d869      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 800088a:	4a94      	ldr	r2, [pc, #592]	; (8000adc <HAL_GPIO_Init+0x2ac>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d04c      	beq.n	800092a <HAL_GPIO_Init+0xfa>
 8000890:	4a92      	ldr	r2, [pc, #584]	; (8000adc <HAL_GPIO_Init+0x2ac>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d863      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 8000896:	4a92      	ldr	r2, [pc, #584]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d046      	beq.n	800092a <HAL_GPIO_Init+0xfa>
 800089c:	4a90      	ldr	r2, [pc, #576]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d85d      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 80008a2:	2b12      	cmp	r3, #18
 80008a4:	d82a      	bhi.n	80008fc <HAL_GPIO_Init+0xcc>
 80008a6:	2b12      	cmp	r3, #18
 80008a8:	d859      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 80008aa:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <HAL_GPIO_Init+0x80>)
 80008ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b0:	0800092b 	.word	0x0800092b
 80008b4:	08000905 	.word	0x08000905
 80008b8:	08000917 	.word	0x08000917
 80008bc:	08000959 	.word	0x08000959
 80008c0:	0800095f 	.word	0x0800095f
 80008c4:	0800095f 	.word	0x0800095f
 80008c8:	0800095f 	.word	0x0800095f
 80008cc:	0800095f 	.word	0x0800095f
 80008d0:	0800095f 	.word	0x0800095f
 80008d4:	0800095f 	.word	0x0800095f
 80008d8:	0800095f 	.word	0x0800095f
 80008dc:	0800095f 	.word	0x0800095f
 80008e0:	0800095f 	.word	0x0800095f
 80008e4:	0800095f 	.word	0x0800095f
 80008e8:	0800095f 	.word	0x0800095f
 80008ec:	0800095f 	.word	0x0800095f
 80008f0:	0800095f 	.word	0x0800095f
 80008f4:	0800090d 	.word	0x0800090d
 80008f8:	08000921 	.word	0x08000921
 80008fc:	4a79      	ldr	r2, [pc, #484]	; (8000ae4 <HAL_GPIO_Init+0x2b4>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d013      	beq.n	800092a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000902:	e02c      	b.n	800095e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e029      	b.n	8000960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	3304      	adds	r3, #4
 8000912:	623b      	str	r3, [r7, #32]
          break;
 8000914:	e024      	b.n	8000960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	3308      	adds	r3, #8
 800091c:	623b      	str	r3, [r7, #32]
          break;
 800091e:	e01f      	b.n	8000960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	330c      	adds	r3, #12
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	e01a      	b.n	8000960 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d102      	bne.n	8000938 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000932:	2304      	movs	r3, #4
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e013      	b.n	8000960 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d105      	bne.n	800094c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000940:	2308      	movs	r3, #8
 8000942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	611a      	str	r2, [r3, #16]
          break;
 800094a:	e009      	b.n	8000960 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800094c:	2308      	movs	r3, #8
 800094e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	69fa      	ldr	r2, [r7, #28]
 8000954:	615a      	str	r2, [r3, #20]
          break;
 8000956:	e003      	b.n	8000960 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
          break;
 800095c:	e000      	b.n	8000960 <HAL_GPIO_Init+0x130>
          break;
 800095e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	2bff      	cmp	r3, #255	; 0xff
 8000964:	d801      	bhi.n	800096a <HAL_GPIO_Init+0x13a>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	e001      	b.n	800096e <HAL_GPIO_Init+0x13e>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3304      	adds	r3, #4
 800096e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	2bff      	cmp	r3, #255	; 0xff
 8000974:	d802      	bhi.n	800097c <HAL_GPIO_Init+0x14c>
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	e002      	b.n	8000982 <HAL_GPIO_Init+0x152>
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	3b08      	subs	r3, #8
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	210f      	movs	r1, #15
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	401a      	ands	r2, r3
 8000994:	6a39      	ldr	r1, [r7, #32]
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	431a      	orrs	r2, r3
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 80b1 	beq.w	8000b12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009b0:	4b4d      	ldr	r3, [pc, #308]	; (8000ae8 <HAL_GPIO_Init+0x2b8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a4c      	ldr	r2, [pc, #304]	; (8000ae8 <HAL_GPIO_Init+0x2b8>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <HAL_GPIO_Init+0x2b8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009c8:	4a48      	ldr	r2, [pc, #288]	; (8000aec <HAL_GPIO_Init+0x2bc>)
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	089b      	lsrs	r3, r3, #2
 80009ce:	3302      	adds	r3, #2
 80009d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	220f      	movs	r2, #15
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	4013      	ands	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a40      	ldr	r2, [pc, #256]	; (8000af0 <HAL_GPIO_Init+0x2c0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d013      	beq.n	8000a1c <HAL_GPIO_Init+0x1ec>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a3f      	ldr	r2, [pc, #252]	; (8000af4 <HAL_GPIO_Init+0x2c4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d00d      	beq.n	8000a18 <HAL_GPIO_Init+0x1e8>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a3e      	ldr	r2, [pc, #248]	; (8000af8 <HAL_GPIO_Init+0x2c8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d007      	beq.n	8000a14 <HAL_GPIO_Init+0x1e4>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a3d      	ldr	r2, [pc, #244]	; (8000afc <HAL_GPIO_Init+0x2cc>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d101      	bne.n	8000a10 <HAL_GPIO_Init+0x1e0>
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	e006      	b.n	8000a1e <HAL_GPIO_Init+0x1ee>
 8000a10:	2304      	movs	r3, #4
 8000a12:	e004      	b.n	8000a1e <HAL_GPIO_Init+0x1ee>
 8000a14:	2302      	movs	r3, #2
 8000a16:	e002      	b.n	8000a1e <HAL_GPIO_Init+0x1ee>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e000      	b.n	8000a1e <HAL_GPIO_Init+0x1ee>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a20:	f002 0203 	and.w	r2, r2, #3
 8000a24:	0092      	lsls	r2, r2, #2
 8000a26:	4093      	lsls	r3, r2
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a2e:	492f      	ldr	r1, [pc, #188]	; (8000aec <HAL_GPIO_Init+0x2bc>)
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	3302      	adds	r3, #2
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	492c      	ldr	r1, [pc, #176]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	600b      	str	r3, [r1, #0]
 8000a54:	e006      	b.n	8000a64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a56:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4928      	ldr	r1, [pc, #160]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a60:	4013      	ands	r3, r2
 8000a62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	4922      	ldr	r1, [pc, #136]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	604b      	str	r3, [r1, #4]
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	491e      	ldr	r1, [pc, #120]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	4918      	ldr	r1, [pc, #96]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	608b      	str	r3, [r1, #8]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4914      	ldr	r1, [pc, #80]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d021      	beq.n	8000b04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	490e      	ldr	r1, [pc, #56]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	60cb      	str	r3, [r1, #12]
 8000acc:	e021      	b.n	8000b12 <HAL_GPIO_Init+0x2e2>
 8000ace:	bf00      	nop
 8000ad0:	10320000 	.word	0x10320000
 8000ad4:	10310000 	.word	0x10310000
 8000ad8:	10220000 	.word	0x10220000
 8000adc:	10210000 	.word	0x10210000
 8000ae0:	10120000 	.word	0x10120000
 8000ae4:	10110000 	.word	0x10110000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000
 8000af0:	40010800 	.word	0x40010800
 8000af4:	40010c00 	.word	0x40010c00
 8000af8:	40011000 	.word	0x40011000
 8000afc:	40011400 	.word	0x40011400
 8000b00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	4909      	ldr	r1, [pc, #36]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	3301      	adds	r3, #1
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f47f ae8e 	bne.w	8000844 <HAL_GPIO_Init+0x14>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	372c      	adds	r7, #44	; 0x2c
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4613      	mov	r3, r2
 8000b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b48:	787b      	ldrb	r3, [r7, #1]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b54:	e003      	b.n	8000b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b56:	887b      	ldrh	r3, [r7, #2]
 8000b58:	041a      	lsls	r2, r3, #16
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	611a      	str	r2, [r3, #16]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e26c      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 8087 	beq.w	8000c96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b88:	4b92      	ldr	r3, [pc, #584]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 030c 	and.w	r3, r3, #12
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d00c      	beq.n	8000bae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b94:	4b8f      	ldr	r3, [pc, #572]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 030c 	and.w	r3, r3, #12
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	d112      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x5e>
 8000ba0:	4b8c      	ldr	r3, [pc, #560]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bac:	d10b      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bae:	4b89      	ldr	r3, [pc, #548]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d06c      	beq.n	8000c94 <HAL_RCC_OscConfig+0x12c>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d168      	bne.n	8000c94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e246      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bce:	d106      	bne.n	8000bde <HAL_RCC_OscConfig+0x76>
 8000bd0:	4b80      	ldr	r3, [pc, #512]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a7f      	ldr	r2, [pc, #508]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e02e      	b.n	8000c3c <HAL_RCC_OscConfig+0xd4>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10c      	bne.n	8000c00 <HAL_RCC_OscConfig+0x98>
 8000be6:	4b7b      	ldr	r3, [pc, #492]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a7a      	ldr	r2, [pc, #488]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	4b78      	ldr	r3, [pc, #480]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a77      	ldr	r2, [pc, #476]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e01d      	b.n	8000c3c <HAL_RCC_OscConfig+0xd4>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c08:	d10c      	bne.n	8000c24 <HAL_RCC_OscConfig+0xbc>
 8000c0a:	4b72      	ldr	r3, [pc, #456]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a71      	ldr	r2, [pc, #452]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b6f      	ldr	r3, [pc, #444]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a6e      	ldr	r2, [pc, #440]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e00b      	b.n	8000c3c <HAL_RCC_OscConfig+0xd4>
 8000c24:	4b6b      	ldr	r3, [pc, #428]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a6a      	ldr	r2, [pc, #424]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b68      	ldr	r3, [pc, #416]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a67      	ldr	r2, [pc, #412]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d013      	beq.n	8000c6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff fd06 	bl	8000654 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c4c:	f7ff fd02 	bl	8000654 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b64      	cmp	r3, #100	; 0x64
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e1fa      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5e:	4b5d      	ldr	r3, [pc, #372]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f0      	beq.n	8000c4c <HAL_RCC_OscConfig+0xe4>
 8000c6a:	e014      	b.n	8000c96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fcf2 	bl	8000654 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fcee 	bl	8000654 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	; 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e1e6      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f0      	bne.n	8000c74 <HAL_RCC_OscConfig+0x10c>
 8000c92:	e000      	b.n	8000c96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d063      	beq.n	8000d6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ca2:	4b4c      	ldr	r3, [pc, #304]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00b      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cae:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d11c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x18c>
 8000cba:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d116      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc6:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <HAL_RCC_OscConfig+0x176>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d001      	beq.n	8000cde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e1ba      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cde:	4b3d      	ldr	r3, [pc, #244]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4939      	ldr	r1, [pc, #228]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	e03a      	b.n	8000d6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d020      	beq.n	8000d3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cfc:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <HAL_RCC_OscConfig+0x270>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d02:	f7ff fca7 	bl	8000654 <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fca3 	bl	8000654 <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e19b      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f0      	beq.n	8000d0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d28:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4927      	ldr	r1, [pc, #156]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
 8000d3c:	e015      	b.n	8000d6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_RCC_OscConfig+0x270>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff fc86 	bl	8000654 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fc82 	bl	8000654 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e17a      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d03a      	beq.n	8000dec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d019      	beq.n	8000db2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_RCC_OscConfig+0x274>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d84:	f7ff fc66 	bl	8000654 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fc62 	bl	8000654 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e15a      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f000 fa78 	bl	80012a0 <RCC_Delay>
 8000db0:	e01c      	b.n	8000dec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_RCC_OscConfig+0x274>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db8:	f7ff fc4c 	bl	8000654 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dbe:	e00f      	b.n	8000de0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fc48 	bl	8000654 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d908      	bls.n	8000de0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e140      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	42420000 	.word	0x42420000
 8000ddc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de0:	4b9e      	ldr	r3, [pc, #632]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1e9      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80a6 	beq.w	8000f46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfe:	4b97      	ldr	r3, [pc, #604]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10d      	bne.n	8000e26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b94      	ldr	r3, [pc, #592]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a93      	ldr	r2, [pc, #588]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b91      	ldr	r3, [pc, #580]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e22:	2301      	movs	r3, #1
 8000e24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e26:	4b8e      	ldr	r3, [pc, #568]	; (8001060 <HAL_RCC_OscConfig+0x4f8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d118      	bne.n	8000e64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e32:	4b8b      	ldr	r3, [pc, #556]	; (8001060 <HAL_RCC_OscConfig+0x4f8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a8a      	ldr	r2, [pc, #552]	; (8001060 <HAL_RCC_OscConfig+0x4f8>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fc09 	bl	8000654 <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e46:	f7ff fc05 	bl	8000654 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b64      	cmp	r3, #100	; 0x64
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e0fd      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e58:	4b81      	ldr	r3, [pc, #516]	; (8001060 <HAL_RCC_OscConfig+0x4f8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f0      	beq.n	8000e46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d106      	bne.n	8000e7a <HAL_RCC_OscConfig+0x312>
 8000e6c:	4b7b      	ldr	r3, [pc, #492]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4a7a      	ldr	r2, [pc, #488]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6213      	str	r3, [r2, #32]
 8000e78:	e02d      	b.n	8000ed6 <HAL_RCC_OscConfig+0x36e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x334>
 8000e82:	4b76      	ldr	r3, [pc, #472]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4a75      	ldr	r2, [pc, #468]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6213      	str	r3, [r2, #32]
 8000e8e:	4b73      	ldr	r3, [pc, #460]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	4a72      	ldr	r2, [pc, #456]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	6213      	str	r3, [r2, #32]
 8000e9a:	e01c      	b.n	8000ed6 <HAL_RCC_OscConfig+0x36e>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d10c      	bne.n	8000ebe <HAL_RCC_OscConfig+0x356>
 8000ea4:	4b6d      	ldr	r3, [pc, #436]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	4a6c      	ldr	r2, [pc, #432]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6213      	str	r3, [r2, #32]
 8000eb0:	4b6a      	ldr	r3, [pc, #424]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4a69      	ldr	r2, [pc, #420]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6213      	str	r3, [r2, #32]
 8000ebc:	e00b      	b.n	8000ed6 <HAL_RCC_OscConfig+0x36e>
 8000ebe:	4b67      	ldr	r3, [pc, #412]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	4a66      	ldr	r2, [pc, #408]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	f023 0301 	bic.w	r3, r3, #1
 8000ec8:	6213      	str	r3, [r2, #32]
 8000eca:	4b64      	ldr	r3, [pc, #400]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	4a63      	ldr	r2, [pc, #396]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d015      	beq.n	8000f0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fbb9 	bl	8000654 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee4:	e00a      	b.n	8000efc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ee6:	f7ff fbb5 	bl	8000654 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e0ab      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efc:	4b57      	ldr	r3, [pc, #348]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0ee      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x37e>
 8000f08:	e014      	b.n	8000f34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fba3 	bl	8000654 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f12:	f7ff fb9f 	bl	8000654 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e095      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f28:	4b4c      	ldr	r3, [pc, #304]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1ee      	bne.n	8000f12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d105      	bne.n	8000f46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f3a:	4b48      	ldr	r3, [pc, #288]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a47      	ldr	r2, [pc, #284]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8081 	beq.w	8001052 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f50:	4b42      	ldr	r3, [pc, #264]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d061      	beq.n	8001020 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d146      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f64:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <HAL_RCC_OscConfig+0x4fc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fb73 	bl	8000654 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff fb6f 	bl	8000654 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e067      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f0      	bne.n	8000f72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f98:	d108      	bne.n	8000fac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f9a:	4b30      	ldr	r3, [pc, #192]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	f023 020f 	bic.w	r2, r3, #15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	492d      	ldr	r1, [pc, #180]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a19      	ldr	r1, [r3, #32]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	4927      	ldr	r1, [pc, #156]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_RCC_OscConfig+0x4fc>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fb43 	bl	8000654 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd2:	f7ff fb3f 	bl	8000654 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e037      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x46a>
 8000ff0:	e02f      	b.n	8001052 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_RCC_OscConfig+0x4fc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fb2c 	bl	8000654 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001000:	f7ff fb28 	bl	8000654 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e020      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x498>
 800101e:	e018      	b.n	8001052 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d101      	bne.n	800102c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e013      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_RCC_OscConfig+0x4f4>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	429a      	cmp	r2, r3
 800103e:	d106      	bne.n	800104e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104a:	429a      	cmp	r2, r3
 800104c:	d001      	beq.n	8001052 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000
 8001060:	40007000 	.word	0x40007000
 8001064:	42420060 	.word	0x42420060

08001068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0a0      	b.n	80011be <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001094:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 800109a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800109e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ac:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a45      	ldr	r2, [pc, #276]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 80010b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b8:	4b43      	ldr	r3, [pc, #268]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4940      	ldr	r1, [pc, #256]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d040      	beq.n	8001158 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d107      	bne.n	80010ee <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d115      	bne.n	8001116 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e067      	b.n	80011be <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d107      	bne.n	8001106 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e05b      	b.n	80011be <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001106:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e053      	b.n	80011be <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f023 0203 	bic.w	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4929      	ldr	r1, [pc, #164]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001128:	f7ff fa94 	bl	8000654 <HAL_GetTick>
 800112c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112e:	e00a      	b.n	8001146 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001130:	f7ff fa90 	bl	8000654 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	f241 3288 	movw	r2, #5000	; 0x1388
 800113e:	4293      	cmp	r3, r2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e03b      	b.n	80011be <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 020c 	and.w	r2, r3, #12
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	429a      	cmp	r2, r3
 8001156:	d1eb      	bne.n	8001130 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4915      	ldr	r1, [pc, #84]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 8001172:	4313      	orrs	r3, r2
 8001174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	490d      	ldr	r1, [pc, #52]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001196:	f000 f81f 	bl	80011d8 <HAL_RCC_GetSysClockFreq>
 800119a:	4602      	mov	r2, r0
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_RCC_ClockConfig+0x160>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	4909      	ldr	r1, [pc, #36]	; (80011cc <HAL_RCC_ClockConfig+0x164>)
 80011a8:	5ccb      	ldrb	r3, [r1, r3]
 80011aa:	fa22 f303 	lsr.w	r3, r2, r3
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_RCC_ClockConfig+0x168>)
 80011b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_RCC_ClockConfig+0x16c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fa0a 	bl	80005d0 <HAL_InitTick>

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	080014a4 	.word	0x080014a4
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d8:	b490      	push	{r4, r7}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011de:	4b2b      	ldr	r3, [pc, #172]	; (800128c <HAL_RCC_GetSysClockFreq+0xb4>)
 80011e0:	f107 0414 	add.w	r4, r7, #20
 80011e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011ec:	1d3c      	adds	r4, r7, #4
 80011ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_RCC_GetSysClockFreq+0xbc>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b04      	cmp	r3, #4
 8001216:	d002      	beq.n	800121e <HAL_RCC_GetSysClockFreq+0x46>
 8001218:	2b08      	cmp	r3, #8
 800121a:	d003      	beq.n	8001224 <HAL_RCC_GetSysClockFreq+0x4c>
 800121c:	e02c      	b.n	8001278 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001222:	e02c      	b.n	800127e <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001230:	4413      	add	r3, r2
 8001232:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d012      	beq.n	8001268 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800124e:	4413      	add	r3, r2
 8001250:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_RCC_GetSysClockFreq+0xc0>)
 800125a:	fb02 f203 	mul.w	r2, r2, r3
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	fbb2 f3f3 	udiv	r3, r2, r3
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
 8001266:	e004      	b.n	8001272 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <HAL_RCC_GetSysClockFreq+0xc4>)
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001276:	e002      	b.n	800127e <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_RCC_GetSysClockFreq+0xc0>)
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800127c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001280:	4618      	mov	r0, r3
 8001282:	3738      	adds	r7, #56	; 0x38
 8001284:	46bd      	mov	sp, r7
 8001286:	bc90      	pop	{r4, r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	08001484 	.word	0x08001484
 8001290:	08001494 	.word	0x08001494
 8001294:	40021000 	.word	0x40021000
 8001298:	007a1200 	.word	0x007a1200
 800129c:	003d0900 	.word	0x003d0900

080012a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <RCC_Delay+0x34>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <RCC_Delay+0x38>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0a5b      	lsrs	r3, r3, #9
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012bc:	bf00      	nop
  }
  while (Delay --);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1e5a      	subs	r2, r3, #1
 80012c2:	60fa      	str	r2, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f9      	bne.n	80012bc <RCC_Delay+0x1c>
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	20000000 	.word	0x20000000
 80012d8:	10624dd3 	.word	0x10624dd3

080012dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e06e      	b.n	80013cc <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d108      	bne.n	8001308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012fe:	d009      	beq.n	8001314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
 8001306:	e005      	b.n	8001314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d106      	bne.n	8001334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff f8b0 	bl	8000494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2202      	movs	r2, #2
 8001338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800134a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001398:	ea42 0103 	orr.w	r1, r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	0c1a      	lsrs	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f002 0204 	and.w	r2, r2, #4
 80013ba:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <__libc_init_array>:
 80013d4:	b570      	push	{r4, r5, r6, lr}
 80013d6:	2600      	movs	r6, #0
 80013d8:	4d0c      	ldr	r5, [pc, #48]	; (800140c <__libc_init_array+0x38>)
 80013da:	4c0d      	ldr	r4, [pc, #52]	; (8001410 <__libc_init_array+0x3c>)
 80013dc:	1b64      	subs	r4, r4, r5
 80013de:	10a4      	asrs	r4, r4, #2
 80013e0:	42a6      	cmp	r6, r4
 80013e2:	d109      	bne.n	80013f8 <__libc_init_array+0x24>
 80013e4:	f000 f838 	bl	8001458 <_init>
 80013e8:	2600      	movs	r6, #0
 80013ea:	4d0a      	ldr	r5, [pc, #40]	; (8001414 <__libc_init_array+0x40>)
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <__libc_init_array+0x44>)
 80013ee:	1b64      	subs	r4, r4, r5
 80013f0:	10a4      	asrs	r4, r4, #2
 80013f2:	42a6      	cmp	r6, r4
 80013f4:	d105      	bne.n	8001402 <__libc_init_array+0x2e>
 80013f6:	bd70      	pop	{r4, r5, r6, pc}
 80013f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80013fc:	4798      	blx	r3
 80013fe:	3601      	adds	r6, #1
 8001400:	e7ee      	b.n	80013e0 <__libc_init_array+0xc>
 8001402:	f855 3b04 	ldr.w	r3, [r5], #4
 8001406:	4798      	blx	r3
 8001408:	3601      	adds	r6, #1
 800140a:	e7f2      	b.n	80013f2 <__libc_init_array+0x1e>
 800140c:	080014b4 	.word	0x080014b4
 8001410:	080014b4 	.word	0x080014b4
 8001414:	080014b4 	.word	0x080014b4
 8001418:	080014b8 	.word	0x080014b8

0800141c <memcpy>:
 800141c:	440a      	add	r2, r1
 800141e:	4291      	cmp	r1, r2
 8001420:	f100 33ff 	add.w	r3, r0, #4294967295
 8001424:	d100      	bne.n	8001428 <memcpy+0xc>
 8001426:	4770      	bx	lr
 8001428:	b510      	push	{r4, lr}
 800142a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800142e:	4291      	cmp	r1, r2
 8001430:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001434:	d1f9      	bne.n	800142a <memcpy+0xe>
 8001436:	bd10      	pop	{r4, pc}

08001438 <memset>:
 8001438:	4603      	mov	r3, r0
 800143a:	4402      	add	r2, r0
 800143c:	4293      	cmp	r3, r2
 800143e:	d100      	bne.n	8001442 <memset+0xa>
 8001440:	4770      	bx	lr
 8001442:	f803 1b01 	strb.w	r1, [r3], #1
 8001446:	e7f9      	b.n	800143c <memset+0x4>

08001448 <strcpy>:
 8001448:	4603      	mov	r3, r0
 800144a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800144e:	f803 2b01 	strb.w	r2, [r3], #1
 8001452:	2a00      	cmp	r2, #0
 8001454:	d1f9      	bne.n	800144a <strcpy+0x2>
 8001456:	4770      	bx	lr

08001458 <_init>:
 8001458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145a:	bf00      	nop
 800145c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145e:	bc08      	pop	{r3}
 8001460:	469e      	mov	lr, r3
 8001462:	4770      	bx	lr

08001464 <_fini>:
 8001464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001466:	bf00      	nop
 8001468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800146a:	bc08      	pop	{r3}
 800146c:	469e      	mov	lr, r3
 800146e:	4770      	bx	lr
