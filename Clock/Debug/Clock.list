
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000178c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800195c  0800195c  0001195c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800198c  0800198c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800198c  0800198c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800198c  0800198c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800198c  0800198c  0001198c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001990  08001990  00011990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080019a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080019a0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000796a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001314  00000000  00000000  0002799f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00028cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f9c6  00000000  00000000  00029dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bcc  00000000  00000000  00039786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006305a  00000000  00000000  00042352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a53ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002460  00000000  00000000  000a5400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001944 	.word	0x08001944

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08001944 	.word	0x08001944

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 f9c5 	bl	80005a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f858 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f000 f8e8 	bl	80003f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000220:	f000 f894 	bl	800034c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000224:	4824      	ldr	r0, [pc, #144]	; (80002b8 <main+0xa8>)
 8000226:	f000 ff7f 	bl	8001128 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 800022a:	4823      	ldr	r0, [pc, #140]	; (80002b8 <main+0xa8>)
 800022c:	f000 ff2a 	bl	8001084 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(TIMER_SEKUND == 1)
 8000230:	4b22      	ldr	r3, [pc, #136]	; (80002bc <main+0xac>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d108      	bne.n	800024a <main+0x3a>
	  {
	  	  TIMER_SEKUND = 0;
 8000238:	4b20      	ldr	r3, [pc, #128]	; (80002bc <main+0xac>)
 800023a:	2200      	movs	r2, #0
 800023c:	701a      	strb	r2, [r3, #0]
		  sekunda ++;
 800023e:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <main+0xb0>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <main+0xb0>)
 8000248:	701a      	strb	r2, [r3, #0]

	  }
	  if(chas == 23 && minuta == 59 && sekunda == 59)
 800024a:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <main+0xb4>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b17      	cmp	r3, #23
 8000250:	d110      	bne.n	8000274 <main+0x64>
 8000252:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <main+0xb8>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b3b      	cmp	r3, #59	; 0x3b
 8000258:	d10c      	bne.n	8000274 <main+0x64>
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <main+0xb0>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b3b      	cmp	r3, #59	; 0x3b
 8000260:	d108      	bne.n	8000274 <main+0x64>
	  {
		  chas = 0;
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <main+0xb4>)
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
		  minuta = 0;
 8000268:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <main+0xb8>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
	      sekunda = 0;
 800026e:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <main+0xb0>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]


	  }

	  if(minuta == 59 && sekunda == 59)
 8000274:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <main+0xb8>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b3b      	cmp	r3, #59	; 0x3b
 800027a:	d10f      	bne.n	800029c <main+0x8c>
 800027c:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <main+0xb0>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b3b      	cmp	r3, #59	; 0x3b
 8000282:	d10b      	bne.n	800029c <main+0x8c>
	   {
		  chas ++;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <main+0xb4>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	b2da      	uxtb	r2, r3
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <main+0xb4>)
 800028e:	701a      	strb	r2, [r3, #0]
	      minuta = 0;
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0xb8>)
 8000292:	2200      	movs	r2, #0
 8000294:	701a      	strb	r2, [r3, #0]
	      sekunda = 0;
 8000296:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <main+0xb0>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
	   }
      if(sekunda == 59)
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <main+0xb0>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b3b      	cmp	r3, #59	; 0x3b
 80002a2:	d1c5      	bne.n	8000230 <main+0x20>
      {
    	 minuta ++;
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <main+0xb8>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <main+0xb8>)
 80002ae:	701a      	strb	r2, [r3, #0]
    	 sekunda = 0;
 80002b0:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <main+0xb0>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
	  if(TIMER_SEKUND == 1)
 80002b6:	e7bb      	b.n	8000230 <main+0x20>
 80002b8:	2000002c 	.word	0x2000002c
 80002bc:	20000028 	.word	0x20000028
 80002c0:	2000002a 	.word	0x2000002a
 80002c4:	20000029 	.word	0x20000029
 80002c8:	2000002b 	.word	0x2000002b

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	; 0x40
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fb2a 	bl	8001934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002fe:	2300      	movs	r3, #0
 8000300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000302:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0318 	add.w	r3, r7, #24
 800030c:	4618      	mov	r0, r3
 800030e:	f000 faaf 	bl	8000870 <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000318:	f000 f880 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000320:	2302      	movs	r3, #2
 8000322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fd1b 	bl	8000d70 <HAL_RCC_ClockConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000340:	f000 f86c 	bl	800041c <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3740      	adds	r7, #64	; 0x40
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000360:	463b      	mov	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000368:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <MX_TIM1_Init+0x9c>)
 800036a:	4a20      	ldr	r2, [pc, #128]	; (80003ec <MX_TIM1_Init+0xa0>)
 800036c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23999;
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <MX_TIM1_Init+0x9c>)
 8000370:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000374:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000376:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <MX_TIM1_Init+0x9c>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800037c:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <MX_TIM1_Init+0x9c>)
 800037e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000382:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <MX_TIM1_Init+0x9c>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <MX_TIM1_Init+0x9c>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <MX_TIM1_Init+0x9c>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000396:	4814      	ldr	r0, [pc, #80]	; (80003e8 <MX_TIM1_Init+0x9c>)
 8000398:	f000 fe24 	bl	8000fe4 <HAL_TIM_Base_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80003a2:	f000 f83b 	bl	800041c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ac:	f107 0308 	add.w	r3, r7, #8
 80003b0:	4619      	mov	r1, r3
 80003b2:	480d      	ldr	r0, [pc, #52]	; (80003e8 <MX_TIM1_Init+0x9c>)
 80003b4:	f001 f81a 	bl	80013ec <HAL_TIM_ConfigClockSource>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80003be:	f000 f82d 	bl	800041c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c2:	2300      	movs	r3, #0
 80003c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	4619      	mov	r1, r3
 80003ce:	4806      	ldr	r0, [pc, #24]	; (80003e8 <MX_TIM1_Init+0x9c>)
 80003d0:	f001 fa14 	bl	80017fc <HAL_TIMEx_MasterConfigSynchronization>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80003da:	f000 f81f 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	2000002c 	.word	0x2000002c
 80003ec:	40012c00 	.word	0x40012c00

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_GPIO_Init+0x28>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <MX_GPIO_Init+0x28>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_GPIO_Init+0x28>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0304 	and.w	r3, r3, #4
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <Error_Handler+0x8>
	...

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <HAL_MspInit+0x5c>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <HAL_MspInit+0x5c>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_MspInit+0x60>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <HAL_MspInit+0x60>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000
 8000488:	40010000 	.word	0x40010000

0800048c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <HAL_TIM_Base_MspInit+0x44>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d113      	bne.n	80004c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800049e:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <HAL_TIM_Base_MspInit+0x48>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a0c      	ldr	r2, [pc, #48]	; (80004d4 <HAL_TIM_Base_MspInit+0x48>)
 80004a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <HAL_TIM_Base_MspInit+0x48>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2101      	movs	r1, #1
 80004ba:	2019      	movs	r0, #25
 80004bc:	f000 f9a1 	bl	8000802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80004c0:	2019      	movs	r0, #25
 80004c2:	f000 f9ba 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40012c00 	.word	0x40012c00
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <NMI_Handler+0x4>

080004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler+0x4>

080004ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051e:	f000 f87d 	bl	800061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

	TIMER_SEKUND ++;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8000536:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <TIM1_UP_TIM16_IRQHandler+0x20>)
 800053a:	f000 fe4f 	bl	80011dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */


  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000028 	.word	0x20000028
 8000548:	2000002c 	.word	0x2000002c

0800054c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	; (8000590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	; (800059c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057e:	f7ff ffe5 	bl	800054c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000582:	f001 f9b3 	bl	80018ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000586:	f7ff fe43 	bl	8000210 <main>
  bx lr
 800058a:	4770      	bx	lr
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000594:	08001994 	.word	0x08001994
  ldr r2, =_sbss
 8000598:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800059c:	20000078 	.word	0x20000078

080005a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_IRQHandler>

080005a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a6:	2003      	movs	r0, #3
 80005a8:	f000 f920 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ac:	200f      	movs	r0, #15
 80005ae:	f000 f805 	bl	80005bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b2:	f7ff ff39 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}

080005bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_InitTick+0x54>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_InitTick+0x58>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f93b 	bl	8000856 <HAL_SYSTICK_Config>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e00e      	b.n	8000608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d80a      	bhi.n	8000606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f0:	2200      	movs	r2, #0
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295
 80005f8:	f000 f903 	bl	8000802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <HAL_InitTick+0x5c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	20000008 	.word	0x20000008
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_IncTick+0x1c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_IncTick+0x20>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4413      	add	r3, r2
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_IncTick+0x20>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	20000008 	.word	0x20000008
 800063c:	20000074 	.word	0x20000074

08000640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <HAL_GetTick+0x10>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	20000074 	.word	0x20000074

08000654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800067c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000686:	4a04      	ldr	r2, [pc, #16]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	60d3      	str	r3, [r2, #12]
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <__NVIC_GetPriorityGrouping+0x18>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	f003 0307 	and.w	r3, r3, #7
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	db0b      	blt.n	80006e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	f003 021f 	and.w	r2, r3, #31
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <__NVIC_EnableIRQ+0x34>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	095b      	lsrs	r3, r3, #5
 80006d8:	2001      	movs	r0, #1
 80006da:	fa00 f202 	lsl.w	r2, r0, r2
 80006de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	db0a      	blt.n	800071a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	b2da      	uxtb	r2, r3
 8000708:	490c      	ldr	r1, [pc, #48]	; (800073c <__NVIC_SetPriority+0x4c>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	0112      	lsls	r2, r2, #4
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	440b      	add	r3, r1
 8000714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000718:	e00a      	b.n	8000730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4908      	ldr	r1, [pc, #32]	; (8000740 <__NVIC_SetPriority+0x50>)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	3b04      	subs	r3, #4
 8000728:	0112      	lsls	r2, r2, #4
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	440b      	add	r3, r1
 800072e:	761a      	strb	r2, [r3, #24]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e100 	.word	0xe000e100
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf28      	it	cs
 8000762:	2304      	movcs	r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3304      	adds	r3, #4
 800076a:	2b06      	cmp	r3, #6
 800076c:	d902      	bls.n	8000774 <NVIC_EncodePriority+0x30>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3b03      	subs	r3, #3
 8000772:	e000      	b.n	8000776 <NVIC_EncodePriority+0x32>
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	f04f 32ff 	mov.w	r2, #4294967295
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	43da      	mvns	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	401a      	ands	r2, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078c:	f04f 31ff 	mov.w	r1, #4294967295
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	43d9      	mvns	r1, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	4313      	orrs	r3, r2
         );
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3724      	adds	r7, #36	; 0x24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b8:	d301      	bcc.n	80007be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00f      	b.n	80007de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <SysTick_Config+0x40>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c6:	210f      	movs	r1, #15
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f7ff ff90 	bl	80006f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SysTick_Config+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <SysTick_Config+0x40>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff2d 	bl	8000654 <__NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff42 	bl	800069c <__NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ff90 	bl	8000744 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff5f 	bl	80006f0 <__NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff35 	bl	80006b8 <__NVIC_EnableIRQ>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffa2 	bl	80007a8 <SysTick_Config>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e26c      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	2b00      	cmp	r3, #0
 800088c:	f000 8087 	beq.w	800099e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000890:	4b92      	ldr	r3, [pc, #584]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 030c 	and.w	r3, r3, #12
 8000898:	2b04      	cmp	r3, #4
 800089a:	d00c      	beq.n	80008b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800089c:	4b8f      	ldr	r3, [pc, #572]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f003 030c 	and.w	r3, r3, #12
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	d112      	bne.n	80008ce <HAL_RCC_OscConfig+0x5e>
 80008a8:	4b8c      	ldr	r3, [pc, #560]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008b4:	d10b      	bne.n	80008ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b6:	4b89      	ldr	r3, [pc, #548]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d06c      	beq.n	800099c <HAL_RCC_OscConfig+0x12c>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d168      	bne.n	800099c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e246      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d6:	d106      	bne.n	80008e6 <HAL_RCC_OscConfig+0x76>
 80008d8:	4b80      	ldr	r3, [pc, #512]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a7f      	ldr	r2, [pc, #508]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80008de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	e02e      	b.n	8000944 <HAL_RCC_OscConfig+0xd4>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10c      	bne.n	8000908 <HAL_RCC_OscConfig+0x98>
 80008ee:	4b7b      	ldr	r3, [pc, #492]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a7a      	ldr	r2, [pc, #488]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80008f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	4b78      	ldr	r3, [pc, #480]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a77      	ldr	r2, [pc, #476]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e01d      	b.n	8000944 <HAL_RCC_OscConfig+0xd4>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000910:	d10c      	bne.n	800092c <HAL_RCC_OscConfig+0xbc>
 8000912:	4b72      	ldr	r3, [pc, #456]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a71      	ldr	r2, [pc, #452]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	4b6f      	ldr	r3, [pc, #444]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a6e      	ldr	r2, [pc, #440]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e00b      	b.n	8000944 <HAL_RCC_OscConfig+0xd4>
 800092c:	4b6b      	ldr	r3, [pc, #428]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a6a      	ldr	r2, [pc, #424]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b68      	ldr	r3, [pc, #416]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a67      	ldr	r2, [pc, #412]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 800093e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000942:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d013      	beq.n	8000974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800094c:	f7ff fe78 	bl	8000640 <HAL_GetTick>
 8000950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000952:	e008      	b.n	8000966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000954:	f7ff fe74 	bl	8000640 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	2b64      	cmp	r3, #100	; 0x64
 8000960:	d901      	bls.n	8000966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000962:	2303      	movs	r3, #3
 8000964:	e1fa      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000966:	4b5d      	ldr	r3, [pc, #372]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0f0      	beq.n	8000954 <HAL_RCC_OscConfig+0xe4>
 8000972:	e014      	b.n	800099e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000974:	f7ff fe64 	bl	8000640 <HAL_GetTick>
 8000978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800097a:	e008      	b.n	800098e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800097c:	f7ff fe60 	bl	8000640 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b64      	cmp	r3, #100	; 0x64
 8000988:	d901      	bls.n	800098e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800098a:	2303      	movs	r3, #3
 800098c:	e1e6      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800098e:	4b53      	ldr	r3, [pc, #332]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f0      	bne.n	800097c <HAL_RCC_OscConfig+0x10c>
 800099a:	e000      	b.n	800099e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800099c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d063      	beq.n	8000a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009aa:	4b4c      	ldr	r3, [pc, #304]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f003 030c 	and.w	r3, r3, #12
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00b      	beq.n	80009ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009b6:	4b49      	ldr	r3, [pc, #292]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 030c 	and.w	r3, r3, #12
 80009be:	2b08      	cmp	r3, #8
 80009c0:	d11c      	bne.n	80009fc <HAL_RCC_OscConfig+0x18c>
 80009c2:	4b46      	ldr	r3, [pc, #280]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d116      	bne.n	80009fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ce:	4b43      	ldr	r3, [pc, #268]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d005      	beq.n	80009e6 <HAL_RCC_OscConfig+0x176>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d001      	beq.n	80009e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e1ba      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e6:	4b3d      	ldr	r3, [pc, #244]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	4939      	ldr	r1, [pc, #228]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 80009f6:	4313      	orrs	r3, r2
 80009f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009fa:	e03a      	b.n	8000a72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d020      	beq.n	8000a46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a04:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <HAL_RCC_OscConfig+0x270>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0a:	f7ff fe19 	bl	8000640 <HAL_GetTick>
 8000a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a10:	e008      	b.n	8000a24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a12:	f7ff fe15 	bl	8000640 <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d901      	bls.n	8000a24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000a20:	2303      	movs	r3, #3
 8000a22:	e19b      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a24:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0f0      	beq.n	8000a12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a30:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4927      	ldr	r1, [pc, #156]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000a40:	4313      	orrs	r3, r2
 8000a42:	600b      	str	r3, [r1, #0]
 8000a44:	e015      	b.n	8000a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <HAL_RCC_OscConfig+0x270>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a4c:	f7ff fdf8 	bl	8000640 <HAL_GetTick>
 8000a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a52:	e008      	b.n	8000a66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a54:	f7ff fdf4 	bl	8000640 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d901      	bls.n	8000a66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a62:	2303      	movs	r3, #3
 8000a64:	e17a      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1f0      	bne.n	8000a54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d03a      	beq.n	8000af4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d019      	beq.n	8000aba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_RCC_OscConfig+0x274>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a8c:	f7ff fdd8 	bl	8000640 <HAL_GetTick>
 8000a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a92:	e008      	b.n	8000aa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a94:	f7ff fdd4 	bl	8000640 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d901      	bls.n	8000aa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	e15a      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0f0      	beq.n	8000a94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f000 fa78 	bl	8000fa8 <RCC_Delay>
 8000ab8:	e01c      	b.n	8000af4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_RCC_OscConfig+0x274>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ac0:	f7ff fdbe 	bl	8000640 <HAL_GetTick>
 8000ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ac6:	e00f      	b.n	8000ae8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ac8:	f7ff fdba 	bl	8000640 <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d908      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e140      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	42420000 	.word	0x42420000
 8000ae4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ae8:	4b9e      	ldr	r3, [pc, #632]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1e9      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f000 80a6 	beq.w	8000c4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b06:	4b97      	ldr	r3, [pc, #604]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d10d      	bne.n	8000b2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	4b94      	ldr	r3, [pc, #592]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4a93      	ldr	r2, [pc, #588]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	61d3      	str	r3, [r2, #28]
 8000b1e:	4b91      	ldr	r3, [pc, #580]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b2e:	4b8e      	ldr	r3, [pc, #568]	; (8000d68 <HAL_RCC_OscConfig+0x4f8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d118      	bne.n	8000b6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b3a:	4b8b      	ldr	r3, [pc, #556]	; (8000d68 <HAL_RCC_OscConfig+0x4f8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a8a      	ldr	r2, [pc, #552]	; (8000d68 <HAL_RCC_OscConfig+0x4f8>)
 8000b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b46:	f7ff fd7b 	bl	8000640 <HAL_GetTick>
 8000b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b4c:	e008      	b.n	8000b60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b4e:	f7ff fd77 	bl	8000640 <HAL_GetTick>
 8000b52:	4602      	mov	r2, r0
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	2b64      	cmp	r3, #100	; 0x64
 8000b5a:	d901      	bls.n	8000b60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e0fd      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b60:	4b81      	ldr	r3, [pc, #516]	; (8000d68 <HAL_RCC_OscConfig+0x4f8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0f0      	beq.n	8000b4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d106      	bne.n	8000b82 <HAL_RCC_OscConfig+0x312>
 8000b74:	4b7b      	ldr	r3, [pc, #492]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	4a7a      	ldr	r2, [pc, #488]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6213      	str	r3, [r2, #32]
 8000b80:	e02d      	b.n	8000bde <HAL_RCC_OscConfig+0x36e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d10c      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x334>
 8000b8a:	4b76      	ldr	r3, [pc, #472]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000b8c:	6a1b      	ldr	r3, [r3, #32]
 8000b8e:	4a75      	ldr	r2, [pc, #468]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000b90:	f023 0301 	bic.w	r3, r3, #1
 8000b94:	6213      	str	r3, [r2, #32]
 8000b96:	4b73      	ldr	r3, [pc, #460]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000b98:	6a1b      	ldr	r3, [r3, #32]
 8000b9a:	4a72      	ldr	r2, [pc, #456]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000b9c:	f023 0304 	bic.w	r3, r3, #4
 8000ba0:	6213      	str	r3, [r2, #32]
 8000ba2:	e01c      	b.n	8000bde <HAL_RCC_OscConfig+0x36e>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	2b05      	cmp	r3, #5
 8000baa:	d10c      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x356>
 8000bac:	4b6d      	ldr	r3, [pc, #436]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	4a6c      	ldr	r2, [pc, #432]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6213      	str	r3, [r2, #32]
 8000bb8:	4b6a      	ldr	r3, [pc, #424]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000bba:	6a1b      	ldr	r3, [r3, #32]
 8000bbc:	4a69      	ldr	r2, [pc, #420]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6213      	str	r3, [r2, #32]
 8000bc4:	e00b      	b.n	8000bde <HAL_RCC_OscConfig+0x36e>
 8000bc6:	4b67      	ldr	r3, [pc, #412]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	4a66      	ldr	r2, [pc, #408]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000bcc:	f023 0301 	bic.w	r3, r3, #1
 8000bd0:	6213      	str	r3, [r2, #32]
 8000bd2:	4b64      	ldr	r3, [pc, #400]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000bd4:	6a1b      	ldr	r3, [r3, #32]
 8000bd6:	4a63      	ldr	r2, [pc, #396]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000bd8:	f023 0304 	bic.w	r3, r3, #4
 8000bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d015      	beq.n	8000c12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be6:	f7ff fd2b 	bl	8000640 <HAL_GetTick>
 8000bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bec:	e00a      	b.n	8000c04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bee:	f7ff fd27 	bl	8000640 <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d901      	bls.n	8000c04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e0ab      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c04:	4b57      	ldr	r3, [pc, #348]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0ee      	beq.n	8000bee <HAL_RCC_OscConfig+0x37e>
 8000c10:	e014      	b.n	8000c3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c12:	f7ff fd15 	bl	8000640 <HAL_GetTick>
 8000c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c18:	e00a      	b.n	8000c30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c1a:	f7ff fd11 	bl	8000640 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d901      	bls.n	8000c30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e095      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c30:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000c32:	6a1b      	ldr	r3, [r3, #32]
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1ee      	bne.n	8000c1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d105      	bne.n	8000c4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c42:	4b48      	ldr	r3, [pc, #288]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a47      	ldr	r2, [pc, #284]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8081 	beq.w	8000d5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c58:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d061      	beq.n	8000d28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d146      	bne.n	8000cfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <HAL_RCC_OscConfig+0x4fc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c72:	f7ff fce5 	bl	8000640 <HAL_GetTick>
 8000c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c78:	e008      	b.n	8000c8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c7a:	f7ff fce1 	bl	8000640 <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d901      	bls.n	8000c8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e067      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c8c:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1f0      	bne.n	8000c7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca0:	d108      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ca2:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	f023 020f 	bic.w	r2, r3, #15
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	492d      	ldr	r1, [pc, #180]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a19      	ldr	r1, [r3, #32]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc4:	430b      	orrs	r3, r1
 8000cc6:	4927      	ldr	r1, [pc, #156]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <HAL_RCC_OscConfig+0x4fc>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd2:	f7ff fcb5 	bl	8000640 <HAL_GetTick>
 8000cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cda:	f7ff fcb1 	bl	8000640 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e037      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f0      	beq.n	8000cda <HAL_RCC_OscConfig+0x46a>
 8000cf8:	e02f      	b.n	8000d5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HAL_RCC_OscConfig+0x4fc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d00:	f7ff fc9e 	bl	8000640 <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d08:	f7ff fc9a 	bl	8000640 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e020      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f0      	bne.n	8000d08 <HAL_RCC_OscConfig+0x498>
 8000d26:	e018      	b.n	8000d5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e013      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_RCC_OscConfig+0x4f4>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d106      	bne.n	8000d56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d001      	beq.n	8000d5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40007000 	.word	0x40007000
 8000d6c:	42420060 	.word	0x42420060

08000d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e0a0      	b.n	8000ec6 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d020      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d9c:	4b4c      	ldr	r3, [pc, #304]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	4a4b      	ldr	r2, [pc, #300]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d005      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	4a45      	ldr	r2, [pc, #276]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dc0:	4b43      	ldr	r3, [pc, #268]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	4940      	ldr	r1, [pc, #256]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d040      	beq.n	8000e60 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d107      	bne.n	8000df6 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de6:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d115      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e067      	b.n	8000ec6 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d107      	bne.n	8000e0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d109      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e05b      	b.n	8000ec6 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0e:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e053      	b.n	8000ec6 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f023 0203 	bic.w	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4929      	ldr	r1, [pc, #164]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e30:	f7ff fc06 	bl	8000640 <HAL_GetTick>
 8000e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e36:	e00a      	b.n	8000e4e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f7ff fc02 	bl	8000640 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e03b      	b.n	8000ec6 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 020c 	and.w	r2, r3, #12
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d1eb      	bne.n	8000e38 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d008      	beq.n	8000e7e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	4915      	ldr	r1, [pc, #84]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d009      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e9e:	f000 f81f 	bl	8000ee0 <HAL_RCC_GetSysClockFreq>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_RCC_ClockConfig+0x160>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	091b      	lsrs	r3, r3, #4
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	4909      	ldr	r1, [pc, #36]	; (8000ed4 <HAL_RCC_ClockConfig+0x164>)
 8000eb0:	5ccb      	ldrb	r3, [r1, r3]
 8000eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_RCC_ClockConfig+0x168>)
 8000eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_RCC_ClockConfig+0x16c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fb7c 	bl	80005bc <HAL_InitTick>

  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	0800197c 	.word	0x0800197c
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ee0:	b490      	push	{r4, r7}
 8000ee2:	b08e      	sub	sp, #56	; 0x38
 8000ee4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000ee8:	f107 0414 	add.w	r4, r7, #20
 8000eec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ef4:	1d3c      	adds	r4, r7, #4
 8000ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d002      	beq.n	8000f26 <HAL_RCC_GetSysClockFreq+0x46>
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d003      	beq.n	8000f2c <HAL_RCC_GetSysClockFreq+0x4c>
 8000f24:	e02c      	b.n	8000f80 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f2a:	e02c      	b.n	8000f86 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	0c9b      	lsrs	r3, r3, #18
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f38:	4413      	add	r3, r2
 8000f3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d012      	beq.n	8000f70 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f56:	4413      	add	r3, r2
 8000f58:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f62:	fb02 f203 	mul.w	r2, r2, r3
 8000f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f6e:	e004      	b.n	8000f7a <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f74:	fb02 f303 	mul.w	r3, r2, r3
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f7e:	e002      	b.n	8000f86 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3738      	adds	r7, #56	; 0x38
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc90      	pop	{r4, r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	0800195c 	.word	0x0800195c
 8000f98:	0800196c 	.word	0x0800196c
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	007a1200 	.word	0x007a1200
 8000fa4:	003d0900 	.word	0x003d0900

08000fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <RCC_Delay+0x34>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <RCC_Delay+0x38>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0a5b      	lsrs	r3, r3, #9
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	fb02 f303 	mul.w	r3, r2, r3
 8000fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000fc4:	bf00      	nop
  }
  while (Delay --);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	60fa      	str	r2, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f9      	bne.n	8000fc4 <RCC_Delay+0x1c>
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	10624dd3 	.word	0x10624dd3

08000fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e041      	b.n	800107a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fa3e 	bl	800048c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2202      	movs	r2, #2
 8001014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3304      	adds	r3, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4610      	mov	r0, r2
 8001024:	f000 fad4 	bl	80015d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d001      	beq.n	800109c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e037      	b.n	800110c <HAL_TIM_Base_Start+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2202      	movs	r2, #2
 80010a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_TIM_Base_Start+0x94>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_TIM_Base_Start+0x52>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b6:	d00e      	beq.n	80010d6 <HAL_TIM_Base_Start+0x52>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a17      	ldr	r2, [pc, #92]	; (800111c <HAL_TIM_Base_Start+0x98>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d009      	beq.n	80010d6 <HAL_TIM_Base_Start+0x52>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a16      	ldr	r2, [pc, #88]	; (8001120 <HAL_TIM_Base_Start+0x9c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d004      	beq.n	80010d6 <HAL_TIM_Base_Start+0x52>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_TIM_Base_Start+0xa0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d111      	bne.n	80010fa <HAL_TIM_Base_Start+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b06      	cmp	r3, #6
 80010e6:	d010      	beq.n	800110a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010f8:	e007      	b.n	800110a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f042 0201 	orr.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40012c00 	.word	0x40012c00
 800111c:	40000400 	.word	0x40000400
 8001120:	40000800 	.word	0x40000800
 8001124:	40014000 	.word	0x40014000

08001128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d001      	beq.n	8001140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e03f      	b.n	80011c0 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_TIM_Base_Start_IT+0xa4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_TIM_Base_Start_IT+0x62>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116a:	d00e      	beq.n	800118a <HAL_TIM_Base_Start_IT+0x62>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_TIM_Base_Start_IT+0xa8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d009      	beq.n	800118a <HAL_TIM_Base_Start_IT+0x62>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <HAL_TIM_Base_Start_IT+0xac>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d004      	beq.n	800118a <HAL_TIM_Base_Start_IT+0x62>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d111      	bne.n	80011ae <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b06      	cmp	r3, #6
 800119a:	d010      	beq.n	80011be <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80011ac:	e007      	b.n	80011be <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0201 	orr.w	r2, r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40012c00 	.word	0x40012c00
 80011d0:	40000400 	.word	0x40000400
 80011d4:	40000800 	.word	0x40000800
 80011d8:	40014000 	.word	0x40014000

080011dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d122      	bne.n	8001238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d11b      	bne.n	8001238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f06f 0202 	mvn.w	r2, #2
 8001208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f9ba 	bl	8001598 <HAL_TIM_IC_CaptureCallback>
 8001224:	e005      	b.n	8001232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f9ad 	bl	8001586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f9bc 	bl	80015aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b04      	cmp	r3, #4
 8001244:	d122      	bne.n	800128c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b04      	cmp	r3, #4
 8001252:	d11b      	bne.n	800128c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f06f 0204 	mvn.w	r2, #4
 800125c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2202      	movs	r2, #2
 8001262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f990 	bl	8001598 <HAL_TIM_IC_CaptureCallback>
 8001278:	e005      	b.n	8001286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f983 	bl	8001586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f992 	bl	80015aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b08      	cmp	r3, #8
 8001298:	d122      	bne.n	80012e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d11b      	bne.n	80012e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f06f 0208 	mvn.w	r2, #8
 80012b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2204      	movs	r2, #4
 80012b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f966 	bl	8001598 <HAL_TIM_IC_CaptureCallback>
 80012cc:	e005      	b.n	80012da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f959 	bl	8001586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f968 	bl	80015aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b10      	cmp	r3, #16
 80012ec:	d122      	bne.n	8001334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b10      	cmp	r3, #16
 80012fa:	d11b      	bne.n	8001334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f06f 0210 	mvn.w	r2, #16
 8001304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2208      	movs	r2, #8
 800130a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f93c 	bl	8001598 <HAL_TIM_IC_CaptureCallback>
 8001320:	e005      	b.n	800132e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f92f 	bl	8001586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f93e 	bl	80015aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b01      	cmp	r3, #1
 8001340:	d10e      	bne.n	8001360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d107      	bne.n	8001360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f06f 0201 	mvn.w	r2, #1
 8001358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f90a 	bl	8001574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	2b80      	cmp	r3, #128	; 0x80
 800136c:	d10e      	bne.n	800138c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001378:	2b80      	cmp	r3, #128	; 0x80
 800137a:	d107      	bne.n	800138c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 faa7 	bl	80018da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001396:	2b40      	cmp	r3, #64	; 0x40
 8001398:	d10e      	bne.n	80013b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a4:	2b40      	cmp	r3, #64	; 0x40
 80013a6:	d107      	bne.n	80013b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80013b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f902 	bl	80015bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d10e      	bne.n	80013e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	d107      	bne.n	80013e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f06f 0220 	mvn.w	r2, #32
 80013dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 fa72 	bl	80018c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_TIM_ConfigClockSource+0x18>
 8001400:	2302      	movs	r3, #2
 8001402:	e0b3      	b.n	800156c <HAL_TIM_ConfigClockSource+0x180>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800142a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143c:	d03e      	beq.n	80014bc <HAL_TIM_ConfigClockSource+0xd0>
 800143e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001442:	f200 8087 	bhi.w	8001554 <HAL_TIM_ConfigClockSource+0x168>
 8001446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800144a:	f000 8085 	beq.w	8001558 <HAL_TIM_ConfigClockSource+0x16c>
 800144e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001452:	d87f      	bhi.n	8001554 <HAL_TIM_ConfigClockSource+0x168>
 8001454:	2b70      	cmp	r3, #112	; 0x70
 8001456:	d01a      	beq.n	800148e <HAL_TIM_ConfigClockSource+0xa2>
 8001458:	2b70      	cmp	r3, #112	; 0x70
 800145a:	d87b      	bhi.n	8001554 <HAL_TIM_ConfigClockSource+0x168>
 800145c:	2b60      	cmp	r3, #96	; 0x60
 800145e:	d050      	beq.n	8001502 <HAL_TIM_ConfigClockSource+0x116>
 8001460:	2b60      	cmp	r3, #96	; 0x60
 8001462:	d877      	bhi.n	8001554 <HAL_TIM_ConfigClockSource+0x168>
 8001464:	2b50      	cmp	r3, #80	; 0x50
 8001466:	d03c      	beq.n	80014e2 <HAL_TIM_ConfigClockSource+0xf6>
 8001468:	2b50      	cmp	r3, #80	; 0x50
 800146a:	d873      	bhi.n	8001554 <HAL_TIM_ConfigClockSource+0x168>
 800146c:	2b40      	cmp	r3, #64	; 0x40
 800146e:	d058      	beq.n	8001522 <HAL_TIM_ConfigClockSource+0x136>
 8001470:	2b40      	cmp	r3, #64	; 0x40
 8001472:	d86f      	bhi.n	8001554 <HAL_TIM_ConfigClockSource+0x168>
 8001474:	2b30      	cmp	r3, #48	; 0x30
 8001476:	d064      	beq.n	8001542 <HAL_TIM_ConfigClockSource+0x156>
 8001478:	2b30      	cmp	r3, #48	; 0x30
 800147a:	d86b      	bhi.n	8001554 <HAL_TIM_ConfigClockSource+0x168>
 800147c:	2b20      	cmp	r3, #32
 800147e:	d060      	beq.n	8001542 <HAL_TIM_ConfigClockSource+0x156>
 8001480:	2b20      	cmp	r3, #32
 8001482:	d867      	bhi.n	8001554 <HAL_TIM_ConfigClockSource+0x168>
 8001484:	2b00      	cmp	r3, #0
 8001486:	d05c      	beq.n	8001542 <HAL_TIM_ConfigClockSource+0x156>
 8001488:	2b10      	cmp	r3, #16
 800148a:	d05a      	beq.n	8001542 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800148c:	e062      	b.n	8001554 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6899      	ldr	r1, [r3, #8]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f000 f98e 	bl	80017be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80014b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	609a      	str	r2, [r3, #8]
      break;
 80014ba:	e04e      	b.n	800155a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6899      	ldr	r1, [r3, #8]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f000 f977 	bl	80017be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014de:	609a      	str	r2, [r3, #8]
      break;
 80014e0:	e03b      	b.n	800155a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	461a      	mov	r2, r3
 80014f0:	f000 f8ee 	bl	80016d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2150      	movs	r1, #80	; 0x50
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f945 	bl	800178a <TIM_ITRx_SetConfig>
      break;
 8001500:	e02b      	b.n	800155a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	461a      	mov	r2, r3
 8001510:	f000 f90c 	bl	800172c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2160      	movs	r1, #96	; 0x60
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f935 	bl	800178a <TIM_ITRx_SetConfig>
      break;
 8001520:	e01b      	b.n	800155a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	6859      	ldr	r1, [r3, #4]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	461a      	mov	r2, r3
 8001530:	f000 f8ce 	bl	80016d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f925 	bl	800178a <TIM_ITRx_SetConfig>
      break;
 8001540:	e00b      	b.n	800155a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f000 f91c 	bl	800178a <TIM_ITRx_SetConfig>
        break;
 8001552:	e002      	b.n	800155a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001554:	bf00      	nop
 8001556:	e000      	b.n	800155a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001558:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
	...

080015d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a35      	ldr	r2, [pc, #212]	; (80016b8 <TIM_Base_SetConfig+0xe8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d00b      	beq.n	8001600 <TIM_Base_SetConfig+0x30>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ee:	d007      	beq.n	8001600 <TIM_Base_SetConfig+0x30>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a32      	ldr	r2, [pc, #200]	; (80016bc <TIM_Base_SetConfig+0xec>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d003      	beq.n	8001600 <TIM_Base_SetConfig+0x30>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <TIM_Base_SetConfig+0xf0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d108      	bne.n	8001612 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <TIM_Base_SetConfig+0xe8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d017      	beq.n	800164a <TIM_Base_SetConfig+0x7a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001620:	d013      	beq.n	800164a <TIM_Base_SetConfig+0x7a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a25      	ldr	r2, [pc, #148]	; (80016bc <TIM_Base_SetConfig+0xec>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00f      	beq.n	800164a <TIM_Base_SetConfig+0x7a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a24      	ldr	r2, [pc, #144]	; (80016c0 <TIM_Base_SetConfig+0xf0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00b      	beq.n	800164a <TIM_Base_SetConfig+0x7a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <TIM_Base_SetConfig+0xf4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <TIM_Base_SetConfig+0x7a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <TIM_Base_SetConfig+0xf8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d003      	beq.n	800164a <TIM_Base_SetConfig+0x7a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <TIM_Base_SetConfig+0xfc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d108      	bne.n	800165c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4313      	orrs	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <TIM_Base_SetConfig+0xe8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d00b      	beq.n	80016a0 <TIM_Base_SetConfig+0xd0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <TIM_Base_SetConfig+0xf4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d007      	beq.n	80016a0 <TIM_Base_SetConfig+0xd0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <TIM_Base_SetConfig+0xf8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d003      	beq.n	80016a0 <TIM_Base_SetConfig+0xd0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <TIM_Base_SetConfig+0xfc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d103      	bne.n	80016a8 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	615a      	str	r2, [r3, #20]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40012c00 	.word	0x40012c00
 80016bc:	40000400 	.word	0x40000400
 80016c0:	40000800 	.word	0x40000800
 80016c4:	40014000 	.word	0x40014000
 80016c8:	40014400 	.word	0x40014400
 80016cc:	40014800 	.word	0x40014800

080016d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	f023 0201 	bic.w	r2, r3, #1
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f023 030a 	bic.w	r3, r3, #10
 800170c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
 8001714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	621a      	str	r2, [r3, #32]
}
 8001722:	bf00      	nop
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f023 0210 	bic.w	r2, r3, #16
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001756:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	031b      	lsls	r3, r3, #12
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4313      	orrs	r3, r2
 8001760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001768:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	621a      	str	r2, [r3, #32]
}
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	f043 0307 	orr.w	r3, r3, #7
 80017ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	609a      	str	r2, [r3, #8]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80017be:	b480      	push	{r7}
 80017c0:	b087      	sub	sp, #28
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80017d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	021a      	lsls	r2, r3, #8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	609a      	str	r2, [r3, #8]
}
 80017f2:	bf00      	nop
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001810:	2302      	movs	r3, #2
 8001812:	e04b      	b.n	80018ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d013      	beq.n	8001880 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001860:	d00e      	beq.n	8001880 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d009      	beq.n	8001880 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d004      	beq.n	8001880 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d10c      	bne.n	800189a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	4313      	orrs	r3, r2
 8001890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40012c00 	.word	0x40012c00
 80018bc:	40000400 	.word	0x40000400
 80018c0:	40000800 	.word	0x40000800
 80018c4:	40014000 	.word	0x40014000

080018c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <__libc_init_array>:
 80018ec:	b570      	push	{r4, r5, r6, lr}
 80018ee:	2600      	movs	r6, #0
 80018f0:	4d0c      	ldr	r5, [pc, #48]	; (8001924 <__libc_init_array+0x38>)
 80018f2:	4c0d      	ldr	r4, [pc, #52]	; (8001928 <__libc_init_array+0x3c>)
 80018f4:	1b64      	subs	r4, r4, r5
 80018f6:	10a4      	asrs	r4, r4, #2
 80018f8:	42a6      	cmp	r6, r4
 80018fa:	d109      	bne.n	8001910 <__libc_init_array+0x24>
 80018fc:	f000 f822 	bl	8001944 <_init>
 8001900:	2600      	movs	r6, #0
 8001902:	4d0a      	ldr	r5, [pc, #40]	; (800192c <__libc_init_array+0x40>)
 8001904:	4c0a      	ldr	r4, [pc, #40]	; (8001930 <__libc_init_array+0x44>)
 8001906:	1b64      	subs	r4, r4, r5
 8001908:	10a4      	asrs	r4, r4, #2
 800190a:	42a6      	cmp	r6, r4
 800190c:	d105      	bne.n	800191a <__libc_init_array+0x2e>
 800190e:	bd70      	pop	{r4, r5, r6, pc}
 8001910:	f855 3b04 	ldr.w	r3, [r5], #4
 8001914:	4798      	blx	r3
 8001916:	3601      	adds	r6, #1
 8001918:	e7ee      	b.n	80018f8 <__libc_init_array+0xc>
 800191a:	f855 3b04 	ldr.w	r3, [r5], #4
 800191e:	4798      	blx	r3
 8001920:	3601      	adds	r6, #1
 8001922:	e7f2      	b.n	800190a <__libc_init_array+0x1e>
 8001924:	0800198c 	.word	0x0800198c
 8001928:	0800198c 	.word	0x0800198c
 800192c:	0800198c 	.word	0x0800198c
 8001930:	08001990 	.word	0x08001990

08001934 <memset>:
 8001934:	4603      	mov	r3, r0
 8001936:	4402      	add	r2, r0
 8001938:	4293      	cmp	r3, r2
 800193a:	d100      	bne.n	800193e <memset+0xa>
 800193c:	4770      	bx	lr
 800193e:	f803 1b01 	strb.w	r1, [r3], #1
 8001942:	e7f9      	b.n	8001938 <memset+0x4>

08001944 <_init>:
 8001944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001946:	bf00      	nop
 8001948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194a:	bc08      	pop	{r3}
 800194c:	469e      	mov	lr, r3
 800194e:	4770      	bx	lr

08001950 <_fini>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	bf00      	nop
 8001954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001956:	bc08      	pop	{r3}
 8001958:	469e      	mov	lr, r3
 800195a:	4770      	bx	lr
